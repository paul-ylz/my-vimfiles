snippet option
	<option value=${1:val}>${2:label}</option>
snippet select
	<select className='form-control'>${1:content}</select>
snippet h4
	<h4>${1:item}</h4>
snippet li
	<li>${1:linkContent}</li>
snippet div
	<div className='${1:class}'>${2:content}</div>
snippet td
	<td>${1:content}</td>
snippet expfn
	export function ${1:functionName}(${2:arg}) {
	}
snippet retfn
	return function(${1:arg}) {
	}
snippet reactfn
	import React from 'react'

	const ${1:ComponentName} = ${2:props} => {
	  return (
		${2:<div></div>}
	  )
	}

	export default $1
snippet p
	<p>${1:contents}</p>
snippet Link
	<Link to=${1:LinkDest}>${2:LinkLabel}</Link>
snippet implink
	import { Link } from 'react-router'
snippet impform
	import { reduxForm } from 'redux-form'
snippet h5
	<h5>${1:contents}</h5>
snippet button
	<button
	  className='btn btn-default'
	  onClick={ this.props.onClick }>
	  ${1:buttonText}
	</button>
snippet form
	<form>
	</form>
snippet strftime
	strftime('%-d %b, %l:%M %p', new Date(${1:timestring}))
snippet .form-group
	<div className='form-group'>
	</div>
snippet textarea
	<textarea className='form-control'/>
snippet glyph
	<span className='glyphicon glyphicon-${1:glyphName}'/>
snippet span
	<span className='${1:class}'>${0}</span>
snippet input
	<input
	  {...${1:field}}
	  type='${2:type}'
	  className='form-control'/>
snippet .help-block
	<div className='help-block'>
	  { ${1:fieldName}.touched ? $1.error : '' }
	</div>
snippet label
	<label>
	</label>
snippet .checkbox
	<div className='checkbox'>
	</div>
snippet cs
	var cx = React.addons.classSet;
snippet cdm
	componentDidMount: function() {
		${1}
	},
snippet cdup
	componentDidUpdate: function(prevProps, prevState) {
		${1}
	},
snippet cwm
	componentWillMount: function() {
		${1}
	},
snippet cwr
	componentWillReceiveProps: function(nextProps) {
		${1}
	},
snippet cwun
	componentWillUnmount: function() {
		${1}
	},
snippet cwu
	componentWillUpdate: function(nextProps, nextState) {
		${1}
	},
snippet cx
	cx({
		${1}: ${2}
	});
snippet fup
	forceUpdate(${1:callback});
snippet gdp
	getDefaultProps: function() {
		return {
			${1}
		};
	},
snippet gis
	getInitialState: function() {
		return {
			${1}: ${2}
		};
	},
snippet ism
	isMounted()
snippet react
	import React, { Component } from 'react'

	class ${1:ClassName} extends Component {

		render() {
			return (
				<div>${0}</div>
			)
		}
	}

	export default $1
snippet bootstrap-modal
	import React, { Component } from 'react';
	import Modal from 'react-bootstrap-modal';

	class ${1:ClassName} extends Component {

	render() {
		const { show, onHide } = this.props;
		return (
		<Modal
			className='show'
			show={show}
		    onHide={onHide}>
			<Modal.Header closeButton>
			<Modal.Title>
			Modal Title
			</Modal.Title>
			</Modal.Header>

			<Modal.Body>
			Modal Body
			</Modal.Body>

			<Modal.Footer>
			<Modal.Dismiss className='btn btn-default'>Cancel</Modal.Dismiss>
			<button
			className='btn btn-default btn-primary'
			type='submit'>
			Save
			</button>
			</Modal.Footer>
		</Modal>
		)
	}
	}

	export default $1;
snippet reactn
	import React from 'react-native';

	class ${1:ClassName} extends React.Component {

		render() {
			return (
				${0:<View />}
			)
		}
	}

	export default $1
snippet redux
	import { connect } from 'react-redux'
snippet connect
	export default connect(
	  mapStateToProps,
	  {}
	)(${1:ClassName})
snippet redux-form
	function validate(values) {
		const errors = {}
		return errors
	}

	function mapStateToProps(state) {
		return {
			initialValues: null
		}
	}

	export default reduxForm({
		form: '$1',
		fields: [],
		validate
	}, mapStateToProps, { })($1)

snippet pt
	propTypes = {
		${1}: React.PropTypes.${2:string}
	};
snippet rcc
	var ${1:ClassName} = React.createClass({

		render: function() {
			return (
				${0:<div />}
			);
		}

	});
snippet ren
	render: function() {
		return (
			${1:<div />}
		);
	}
snippet sst
	setState({
		${1}: ${2}
	});
snippet scu
	shouldComponentUpdate: function(nextProps, nextState) {
		${1}
	},
snippet props
	this.props.${1}
snippet mapS
	function mapStateToProps(state) {
	  return {$1}
	}
snippet state
	this.state.${1}
snippet trp
	transferPropsTo(${1});
// this is for jsx html
snippet h3
	<h3>${1}</h3>
snippet ul.
	<ul className="${1}">${0}</ul>
snippet li.
	<li className="${1}">${0}</li>
snippet img
	<img src=${1} />
snippet ahref
	<a href=${1}>${0}</a>
snippet Text
	<Text${1}>${2}</Text>${0}
snippet View
	<View${1}>${2}</View>${0}
snippet Image
	<Image source=${1} />${0}
snippet ListView
	<ListView${1}/>${0}
snippet styles
	var styles = StyleSheet.create({
		${1}
	});${0}
snippet aii
	<ActivityIndicatorIOS
	  ${1}
	>${2}</ActivityIndicatorIOS>${0}
snippet thl
	<TouchableHighlight${1}>${2}</TouchableHighlight>${0}
snippet ScrollView
	<ScrollView${1}>${2}</ScrollView>${0}
